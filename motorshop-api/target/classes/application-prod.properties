# Production Database (using environment variables)
spring.datasource.url=${JDBC_DATABASE_URL}
spring.datasource.username=${JDBC_DATABASE_USERNAME}
spring.datasource.password=${JDBC_DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate settings for production
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Connection pool settings
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000

# Reduced logging levels for production
logging.level.ec.puce.motoshop=INFO
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN

# Amazon Core integration settings (using environment variables)
amazon-core.base-url=${AMAZON_CORE_BASE_URL}
amazon-core.connect-timeout=10000
amazon-core.read-timeout=10000
amazon-core.max-retries=3

# Security headers
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto

# Add basic health endpoint
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=never

# CORS configuration - temporarily allow all origins during testing
spring.mvc.cors.allowed-origins=*
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=*

# Server port configuration
server.port=9090
